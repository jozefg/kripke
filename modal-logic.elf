%{A normal construction of modal logic with ◯ and □}%

prop : type.
∧    : prop -> prop -> prop. %infix right 5 ∧.
∨    : prop -> prop -> prop. %infix right 5 ∨.
⇒   : prop -> prop -> prop. %infix right 5 ⇒.
⊤    : prop.
⊥    : prop.
◯   : prop -> prop.
□    : prop -> prop.

term : type.
and  : term -> term -> term.
inl  : term -> term.
inr  : term -> term.
lam  : (term -> term) -> term.
tt   : term.
circ : term -> term.
box  : term -> term.

let/and  : term -> (term -> term -> term) -> term.
let/or   : term -> (term -> term) -> (term -> term) -> term.
let/box  : term -> (term -> term) -> term.
let/circ : term -> (term -> term) -> term.

app : term -> term -> term.
absurd : term -> term.

%{We need to ensure that a box contains no free terms in order to form
  a box.}%

local : (term -> term) -> type.
local/none : local ([x] M).
local/and  : local ([x] and (M x) (N x))
              <- local N
              <- local M.
local/inl  : local ([x] inl (M x))
              <- local M.
local/inr  : local ([x] inr (M x))
              <- local M.
local/lam  : local ([x] lam ([y] M x y))
              <- ({y} local ([x] M x y)).
local/circ : local ([x] circ (N x))
              <- local N.
local/let/and  : local ([x] let/and (A x) ([a][b] F x a b))
                  <- local A
                  <- ({a}{b} local ([x] F x a b)).
local/let/or   : local ([x] let/or (A x) ([a] F x a) ([b] G x b))
                  <- local A
                  <- ({a} local ([x] F x a))
                  <- ({b} local ([x] G x b)).
local/let/box  : local ([x] let/box (A x) ([a] F x a))
                  <- local A
                  <- ({a} local ([x] F x a)).
local/let/circ : local ([x] let/circ (A x) ([a] F x a))
                  <- local A
                  <- ({a} local ([x] F x a)).
local/app : local ([x] app (F x) (A x))
             <- local F
             <- local A.
local/absurd : local ([x] absurd (N x))
              <- local N.

of : term -> prop -> type.
of/and : of A TA -> of B TB -> of (and A B) (TA ∧ TB).
of/inl : of A TA -> of (inl A) (TA ∨ TB).
of/inl : of B TB -> of (inl A) (TA ∨ TB).
of/lam : of (lam F) (TA ⇒ TB)
          <- ({x} of x A -> of (F x) B).
of/tt  : of tt ⊤.
of/circ : of A TA -> of (circ A) (◯ TA).
of/box  : of A TA -> of (box A) (□ TA).
of/let/and : of (let/and P F) C
              <- of P (A ∧ B)
              <- ({x}{y} of x A -> of x B -> of (F x y) C)
              <- ({x} local (F x))
              <- ({y} local ([x] F x y)).
of/let/or  : of (let/or O Inl Inr) C
              <- of O (A ∨ B)
              <- ({x} of x A -> of (Inl x) C)
              <- ({y} of y B -> of (Inr y) C)
              <- local Inl
              <- local Inr.
of/let/box : of (let/box N F) B
              <- of N (□ A)
              <- ({x} of x A -> of (F x) B).
of/let/circ : of (let/circ N F) (◯ B)
               <- of N (◯ A)
               <- ({x} of x A -> of (F x) (◯ B)).
of/app : of (app F A) TB
          <- of F (TA ⇒ TB)
          <- of A TA.
of/absurd : of (absurd B) Any
             <- of B ⊥.
